#!/usr/bin/env python


import os
import sys

# stolen from dash/locate_pdaq.py
METADIR = None
def find_pdaq_trunk():
    "Find the pDAQ tree"
    global METADIR
    if METADIR is not None:
        return METADIR

    if "PDAQ_HOME" in os.environ:
        dir = os.environ["PDAQ_HOME"]
        if os.path.exists(dir):
            METADIR = dir
            return METADIR

    homePDAQ = os.path.join(os.environ["HOME"], "pDAQ_current")
    curDir = os.getcwd()
    [parentDir, baseName] = os.path.split(curDir)
    for dir in [curDir, parentDir, homePDAQ]:
        # source tree has 'dash', 'src', and 'StringHub' (and maybe 'target')
        # deployed tree has 'dash', 'src', and 'target'
        if os.path.isdir(os.path.join(dir, 'dash')) and \
            os.path.isdir(os.path.join(dir, 'src')) and \
            (os.path.isdir(os.path.join(dir, 'target')) or
             os.path.isdir(os.path.join(dir, 'StringHub'))):
            METADIR = dir
            return METADIR

    raise DirectoryNotFoundException("Cannot find pDAQ trunk (PDAQ_HOME)")

sys.path.append(os.path.join(find_pdaq_trunk(), "dash"))
from RunJava import runJava


PDAQ_LOG_DIR = "/mnt/data/pdaq/log/"

def add_arguments(parser):
    parser.add_argument("-v", "--verbose", dest="verbose",
                        action="store_true", default=False,
                        help="Print extra information")
    parser.add_argument(dest="fileList", nargs="+")


def add_moni(path, moniList):
    if os.path.isfile(path):
        moniList.append(path)
        return True

    found = False
    if os.path.isdir(path):
        for entry in os.listdir(path):
            if entry.endswith(".moni"):
                moniList.append(os.path.join(path, entry))
                found = True

    return found

def chart(args):
    appArgs = []

    if args.verbose:
        appArgs.append("-v")

    for f in args.fileList:
        for i in xrange(100):
            path = None
            if i == 0:
                path = f
            elif i == 1:
                path = "daqrun" + f
            elif i == 2:
                path = PDAQ_LOG_DIR + f
            elif i == 3:
                path = PDAQ_LOG_DIR + "daqrun" + f
            else:
                raise SystemExit("Bad pDAQ log directory '%s'" % f)

            if os.path.exists(path):
                if not add_moni(path, appArgs):
                    print >>sys.stderr, "No moni files found in '%s'" % path
                break

    app = "icecube.daq.tools.DAQMoniChart"
    daqProjects = ["daq-common", "daq-moni-tool"]
    mavenDeps = [
        ("org/jfree", "jcommon", "1.0.23"),
        ("org/jfree", "jfreechart", "1.0.19"),
        ("log4j", "log4j", "1.0.19"),
    ]

    runJava(app, ["-mx4000m"], appArgs, daqProjects, mavenDeps)


if __name__ == "__main__":
    import argparse

    p = argparse.ArgumentParser()
    add_arguments(p)
    args = p.parse_args()

    chart(args)
